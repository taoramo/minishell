
Features:
	✔ Display a prompt when waiting for a new command. @done(24-01-30 13:47)
	✔ Have a working history. @done(24-01-30 13:47)
	✔ Search and launch the right executable @done(24-01-30 13:47)
		✔ based on the PATH variable @done(24-01-30 13:46)
		✔ using a relative or an absolute path @done(24-01-30 13:47)
	☐ Avoid using more than one global variable to indicate a received signal.
	✔ Not interpret unclosed quotes @done(24-01-30 14:15)
	✔ Not interperet special characters which are not required by the subject such as \ (backslash) or ; (semicolon). @done(24-02-12 13:39)
	✔ Handle ’ (single quote) which should prevent the shell from interpreting the metacharacters in the quoted sequence. @done(24-02-12 13:38)
	✔ Handle " (double quote) which should prevent the shell from interpreting the metacharacters in the quoted sequence except for $ (dollar sign). @done(24-02-12 13:38)
	✔ Implement redirections @done(24-01-30 13:51)
		✔ < should redirect input @done(24-01-30 13:51)
		✔ > should redirect output @done(24-01-30 13:51)
		✔ << should be given a delimiter, then read the input until a line containing the delimiter is seen. However, it doesn’t have to update the history! @done(24-01-30 13:51)
		✔ >> should redirect output in append mode @done(24-01-30 13:51)
	✔ Implement pipes (| character). @done(24-01-30 13:52)
	✔ Handle environment variables ($ followed by a sequence of characters) which should expand to their values. @done(24-02-12 11:42)
	✔ Handle $? which should expand to the exit status of the most recently executed foreground pipeline. @done(24-02-12 11:42)
	☐ Handle ctrl-C, ctrl-D and ctrl-\ which should BEHAVE LIKE IN BASH (see fixes section)
		✔ ctrl-C displays a new prompt on a new line @done(24-01-30 13:55)
		✔ ctrl-D exits the shell @done(24-01-30 13:55)
		✔ ctrl-\ does nothing @done(24-01-30 13:56)
	☐ << operators always take input first, even if you have the bonus’ && / || operators it will first take every heredoc’s input that’s on the inputted line and then goes through the multiple cmd pipelines. It is interesting because it’s the only redirection that takes such precedence (trying to be user-friendly? idk)
	☐ ctrl-c and ctrl-d work in their special way during the input taking of the heredoc
	✔ you can have multiple heredocs within one pipeline which means managing multiple temp files @done(24-02-12 13:42)


Built-in functions:
	✔ Work for single commands @done(24-02-06 14:35)
	✔ Work in pipes @done(24-02-06 14:35)
	✔ echo with option -n @done(24-02-06 14:35)
	✔ cd with only a relative or absolute path @done(24-02-12 08:54)
	✔ pwd with no options @done(24-02-08 16:29)
	✔ export with no options @done(24-02-08 16:29)
	✔ unset with no options @done(24-02-08 16:29)
	✔ env with no options or arguments @done(24-02-06 14:35)
	☐ exit with no options

Bonus:
	✔ && and || with parenthesis for priorities. @done(24-01-30 13:59)
	✔ Wildcards * should work for the current working directory. @done(24-02-08 16:29)

Fixes:
	☐ ctrl-D should print "exit" before exiting (does not anymore, because of "^C" fix?)
		☐ If we are specific, it should print exit on the same line as minishell prompt
	☐ Error checks everywhere
	☐ Handle exit when command fails correctly (free etc)
	☐ "echo hi > a | grep h > b > a > c < a" a, b, and c should be empty
	☐ disable all error message printing while taking heredoc input
	☐ export x="echo hello | cat" freezes, should work
	☐ cat < "hello" stuck with new order, might have to change extract files

Unsure:
	☐ << should read the input until a line CONTAINING the delimiter is seen, bash reads until a line ONLY CONTAINING
		currently works as bash does
	☐ export x='$y' | export y=z | echo $x should not change env variables ?? does pipe have own env ?
		since pipe is forked, should run in subshell (random person on internet), so could use env instead of *env

Tester:
	✔ Figure out how to test in interactive mode for e.g. "cd" testing @done(24-02-12 11:59)
		just use && and ||

Archived fixes:
	✔ ctrl-C should not print "^C" - have not found a way other than to run "stty -echoctl" to stop the terminal emulator from printing control characters @done(24-02-05 09:54)
	✔ "* hello" in a folder containing only a file named "echo" should work as "echo hello" @done(24-02-12 08:44)
	✔ the argument .. doesn't get to argv, for example "echo .." (or arg .) @done(24-02-12 08:44)
	✔ cd with relative path @done(24-02-12 08:44)
	✔ ft_getenv needs to determine size of returned string, cannot be known before @done(24-02-12 08:44)
	✔ Non matching wildcard pattern should return the pattern @done(24-02-12 08:44)
	✔ should the command 'ec"ho" hello' work? it does in bash @done(24-02-09 08:39)
	✔ Use ft_getenv in add_path as well @done(24-02-12 08:46)
	✔ ft_getenv expands "$HOME*" as it would $HOME, should expand $HOME* (blank output) @done(24-02-12 08:46)
	✔ "./false 1 || ./true 2" - first command returns 1 but second does not run @done(24-01-30 15:09)
	✔ "./false 1 && ./true 2 || ./true 3" stopping after first false @done(24-01-30 15:40)
	✔ "./true 1 && ./false 2 || (./true 3 && ./false 4) || ./false 5 && ./true 6" skipping parentheses @done(24-02-01 10:20)
	✔ Unnecessary "syntax error near unexpected token `(’" in e.g. "awk 'BEGIN { for(i=1;i<=5;i++) print "10 x", i, "is",10*i; }'" @done(24-02-05 09:44)
	✔ export x='$a', export a=hello, echo $x prints "hello", shoud print "$a" and not re-expand expanded result @done(24-02-12 09:32)
	✔ export x='$$$$$a', export a=hello, echo $x prints "hello", shoud print "$$$$$a" and not re-expand expanded result @done(24-02-12 10:35)
	✔ "touch a && chmod 000 a && echo hi > a" should print "minishell: a: Permission denied" @done(24-02-12 12:39)
	✔ ./false 1 || ./false 2 | echo $? always prints 0 @done(24-02-12 13:26)
	✔ export list should be in alphabetical order @done(24-02-12 13:58)
	✔ minishell> << LIM > a > b > a >> b | << LIM > c @done(24-02-12 14:19)
	✔ "<< LIM" also sefaults @done(24-02-12 14:19)
	✔ "echo | echo | > echo" segfaults @done(24-02-12 14:24)
	✔ "echo hello &&& echo wow" and "echo hello ||| echo wow" output the first "hello" (should not run at all) @done(24-02-13 08:21)
	✔ "echo hello && | echo wow" prints "hello" and "wow" (should fail on '|' at start of command and not run at all) @done(24-02-13 08:21)
	✔ "cd tester" "cd .." segfault @done(24-02-13 08:21)
	✔ export and unset should take multiple args @done(24-02-13 08:21)
	✔ export ASDF && export prints two vars on the same line @done(24-02-13 08:21)
	✔ export name cannot begin with a number (e.g. "export 1x" error "bash: export: `1x': not a valid identifier") @done(24-02-13 08:21)
	✔ When giving a piped command: "syntax error near unexpected token `|’" (probably in function check_cmd_line_syntax) @done(24-02-01 11:07)
		✔ fixed in "check_cmd_line_syntax", check that this change does not break any error checking @done(24-02-13 08:21)
	✔ "‘|’ cat" should print error message @done(24-02-13 08:34)
